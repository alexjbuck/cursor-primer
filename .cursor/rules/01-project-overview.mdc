---
description: 
globs: 
alwaysApply: true
---
# Project Overview: cursor-primer, a marp presentation about the cursor app and leveraging cursor self-learning

## Context
This project is a Marp-based presentation that explains the features and capabilities of the Cursor IDE, with a particular focus on its self-learning capabilities.

## Project Structure
Marp (also known as the Markdown Presentation Ecosystem) provides an intuitive experience for creating beautiful slide decks. You only have to focus on writing your story in a Markdown document.

The presentation source is organized in the `slides` directory, with the main content in `index.md`.

## Technology Stack
- `marp` for slide generation and presentation creation
- `yarn` for task orchestration and node package management
- `fnm` for Node.js version management via `.node-version` file
- `eslint` and `npmpkgjsonlint` for code quality and package.json linting
- GitHub Actions for CI/CD pipeline
- GitHub Pages for hosting the deployed presentation

## Repository Organization
```
├── package.json          # Project configuration and dependencies
├── README.md            # Project documentation
├── slides/              # Presentation source files
│   └── index.md        # Main presentation content
├── .node-version        # Node.js version specification for fnm
└── yarn.lock            # Yarn dependency lock file
```

## Example Slides

````md
---
theme: gaia
_class: lead
paginate: true
backgroundColor: #fff
backgroundImage: url('https://marp.app/assets/hero-background.svg')
---

![bg left:40% 80%](mdc:https:/marp.app/assets/marp.svg)

# **Marp**

Markdown Presentation Ecosystem

https://marp.app/

---

# How to write slides

Split pages by horizontal ruler (`---`). It's very simple! :satisfied:

```markdown
# Slide 1

foobar

---

# Slide 2

foobar
```
````

## Development Workflow
1. Develop new slides in `slides/index.md`
2. Use `yarn dev` for live preview while editing
3. Run linters to ensure code quality
4. Commit changes if linters pass
5. CI/CD pipelines automatically build and deploy to GitHub Pages

## Build Outputs
The build process generates multiple formats:
- HTML (primary format for web deployment)
- PDF (for offline viewing/printing)
- PPTX (for PowerPoint compatibility)

## Collaboration Guidelines
- Use descriptive branch names
- Create focused PRs with clear descriptions
- Follow the established markdown style
- Update documentation as needed

## Version Management
- Node.js versions are managed via fnm using `.node-version`
- Run `fnm use` in the project directory to automatically switch to the correct version
- The project currently uses Node.js 22

